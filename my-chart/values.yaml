# Global values
global:
  imageRegistry: ghcr.io/remla25-team11 # Or your Docker Hub username / other registry
  defaultTag: latest
  namespace: sentiment-app

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 80

rateLimit:
  enabled: true
  maxTokens: 10
  tokensPerFill: 10
  fillInterval: "1s"

# Nginx Frontend (v1 - primary)
nginxFrontendV1:
  nameOverride: nginx-frontend-v1
  replicaCount: 1
  image:
    repository: nginx-frontend
    tag: "v1"
    pullPolicy: IfNotPresent
  service:
    port: 80
    targetPort: 80
  # The value is now a template string (in single quotes) to be rendered by the `tpl` function
  env:
    APP_SERVICE_URL: 'http://{{ include "app-chart.fullname" . }}-app-backend:5000'
  versionLabel: "v1"

# Nginx Frontend (v2 - canary/ab-test)
nginxFrontendV2:
  nameOverride: nginx-frontend-v2
  replicaCount: 1
  image:
    repository: nginx-frontend
    tag: "v2"
    pullPolicy: IfNotPresent
  service:
    port: 80
    targetPort: 80
  # The value is now a template string
  env:
    APP_SERVICE_URL: 'http://{{ include "app-chart.fullname" . }}-app-backend:5000'
  versionLabel: "v2"

# Flask App Backend (app-service)
appBackend:
  nameOverride: app-backend
  replicaCount: 1
  image:
    repository: app-backend
    tag: "v1.1.2" # Uses global.defaultTag
    pullPolicy: IfNotPresent
  service:
    port: 5000
    targetPort: 5000
  # The values are now template strings
  env:
    URL_MODEL_SERVICE: 'http://{{ include "app-chart.fullname" . }}-model-backend:8000/predict'
    URL_MODEL_VERSION: 'http://{{ include "app-chart.fullname" . }}-model-backend:8000/version'

# Flask Model Backend (model-service)
modelBackend:
  nameOverride: model-backend
  replicaCount: 1
  image:
    repository: model-backend
    tag: "" # Uses global.defaultTag
    pullPolicy: IfNotPresent
  service:
    port: 8000
    targetPort: 8000
  # NOTE: The command for debugging has been removed. The application will now start.
  # command: ["/bin/sh", "-c", "echo 'Container is alive for debugging'; sleep 3600"]
  env:
    SERVICE_VERSION: "1.0"
    MODEL_PATH: "/app/models/c2_Classifier_Sentiment_Model.pkl"
    VECTORIZER_PATH: "/app/models/c1_BoW_Sentiment_Model.pkl"

# Istio Gateway configuration
istioGateway:
  enabled: true
  name: app-gateway
  selector:
    istio: ingressgateway

# Istio VirtualService configuration
istioVirtualService:
  enabled: true
  name: app-virtualservice
  hosts:
    - "*"
  nginxFrontendServiceHost: "nginx-frontend"
  routing:
    v1:
      weight: 90
    v2:
      weight: 10

# Istio DestinationRule configuration
istioDestinationRule:
  enabled: true
  name: app-destinationrule # Changed from 'app-destinationrules' for consistency
  nginxFrontendServiceHost: "nginx-frontend"

# Grafana Dashboard configuration
grafanaDashboard:
  enabled: true
  fileName: "app-dashboard.json"
  namespace: "monitoring"

# Standard Kubernetes Ingress (usually disabled when using Istio Gateway for app)
ingress:
  enabled: false
