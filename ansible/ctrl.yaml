# # ansible/ctrl.yaml
# - name: Provision Kubernetes controller node
#   hosts: ctrl
#   become: true
#   vars:
#     kube_packages:
#       - containerd
#       - runc
#       - kubelet=1.32.4-1.1
#       - kubeadm=1.32.4-1.1
#       - kubectl=1.32.4-1.1
#     kubernetes_apt_key_url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
#     kubernetes_apt_repo: "deb https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
#     hosts_entries:
#       - { ip: "192.168.56.100", name: "ctrl" }
#       - { ip: "192.168.56.101", name: "node-1" }
#       - { ip: "192.168.56.102", name: "node-2" }

#   tasks:
#     - name: Disable swap
#       shell: swapoff -a

#     - name: Remove swap from fstab
#       lineinfile:
#         path: /etc/fstab
#         regexp: '^\s*[^#]+\s+swap\s+'
#         state: absent

#     - name: Load required kernel modules
#       copy:
#         dest: /etc/modules-load.d/k8s.conf
#         content: |
#           overlay
#           br_netfilter

#     - name: Load modules now
#       modprobe:
#         name: "{{ item }}"
#       loop: [overlay, br_netfilter]

#     - name: Set sysctl values
#       sysctl:
#         name: "{{ item.name }}"
#         value: "{{ item.value }}"
#         state: present
#         reload: yes
#       loop:
#         - { name: net.ipv4.ip_forward, value: 1 }
#         - { name: net.bridge.bridge-nf-call-iptables, value: 1 }
#         - { name: net.bridge.bridge-nf-call-ip6tables, value: 1 }

#     - name: Add hosts file entries
#       lineinfile:
#         path: /etc/hosts
#         line: "{{ item.ip }} {{ item.name }}"
#         state: present
#       loop: "{{ hosts_entries }}"

#     - name: Add Kubernetes apt key
#       apt_key:
#         url: "{{ kubernetes_apt_key_url }}"
#         state: present

#     - name: Add Kubernetes apt repo
#       apt_repository:
#         repo: "{{ kubernetes_apt_repo }}"
#         state: present
#         filename: kubernetes

#     - name: Update apt cache
#       apt:
#         update_cache: yes

#     - name: Install Kubernetes + containerd packages
#       apt:
#         name: "{{ kube_packages }}"
#         state: present

#     - name: Ensure containerd config directory exists
#       file:
#         path: /etc/containerd
#         state: directory

#     - name: Generate default containerd config
#       shell: "containerd config default > /etc/containerd/config.toml"
#       args:
#         creates: /etc/containerd/config.toml

#     - name: Configure containerd for Kubernetes
#       lineinfile:
#         path: /etc/containerd/config.toml
#         regexp: "{{ item.regexp }}"
#         line: "{{ item.line }}"
#       loop:
#         - { regexp: '^(\s*)SystemdCgroup\s*=.*$', line: '            SystemdCgroup = true' }
#         - { regexp: '^(\s*)disable_apparmor\s*=.*$', line: '        disable_apparmor = true' }
#         - { regexp: '^(\s*)sandbox_image\s*=.*$', line: '        sandbox_image = "registry.k8s.io/pause:3.10"' }

#     - name: Restart containerd
#       service:
#         name: containerd
#         state: restarted
#         enabled: yes

---
- name: Disable SSH host key checking
  hosts: ctrl
  become: true
  tasks:
    - name: Create Ansible config to disable host key checking
      copy:
        dest: /etc/ansible/ansible.cfg
        content: |
          [defaults]
          host_key_checking = False

- name: Provision Kubernetes controller node
  hosts: ctrl
  become: true
  vars:
    kube_packages:
      - containerd
      - runc
      - kubelet=1.32.4-1.1
      - kubeadm=1.32.4-1.1
      - kubectl=1.32.4-1.1
    kubernetes_apt_key_url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
    kubernetes_apt_repo: "deb https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
    hosts_entries:
      - { ip: "192.168.56.100", name: "ctrl" }
      - { ip: "192.168.56.101", name: "node-1" }
      - { ip: "192.168.56.102", name: "node-2" }

  tasks:

    - name: Disable swap
      shell: swapoff -a

    - name: Remove swap from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^\s*[^#]+\s+swap\s+'
        state: absent

    - name: Load required kernel modules
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter

    - name: Load modules now
      modprobe:
        name: "{{ item }}"
      loop: [overlay, br_netfilter]

    - name: Set sysctl values
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: net.ipv4.ip_forward, value: 1 }
        - { name: net.bridge.bridge-nf-call-iptables, value: 1 }
        - { name: net.bridge.bridge-nf-call-ip6tables, value: 1 }

    - name: Add hosts file entries
      lineinfile:
        path: /etc/hosts
        line: "{{ item.ip }} {{ item.name }}"
        state: present
      loop: "{{ hosts_entries }}"

    - name: Add Kubernetes apt key
      apt_key:
        url: "{{ kubernetes_apt_key_url }}"
        state: present

    - name: Add Kubernetes apt repo
      apt_repository:
        repo: "{{ kubernetes_apt_repo }}"
        state: present
        filename: kubernetes

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Kubernetes + containerd packages
      apt:
        name: "{{ kube_packages }}"
        state: present

    - name: Ensure containerd config directory exists
      file:
        path: /etc/containerd
        state: directory

    - name: Generate default containerd config
      shell: "containerd config default > /etc/containerd/config.toml"
      args:
        creates: /etc/containerd/config.toml

    - name: Configure containerd for Kubernetes
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^(\s*)SystemdCgroup\s*=.*$', line: '            SystemdCgroup = true' }
        - { regexp: '^(\s*)disable_apparmor\s*=.*$', line: '        disable_apparmor = true' }
        - { regexp: '^(\s*)sandbox_image\s*=.*$', line: '        sandbox_image = "registry.k8s.io/pause:3.10"' }

    - name: Restart containerd
      service:
        name: containerd
        state: restarted
        enabled: yes

    # ✅ Step 13: Initialize Kubernetes cluster
    - name: Check if cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_config

    - name: Initialize Kubernetes with kubeadm
      shell: |
        kubeadm init \
          --apiserver-advertise-address=192.168.56.100 \
          --node-name ctrl \
          --pod-network-cidr=10.244.0.0/16
      when: not kubeadm_config.stat.exists

    # ✅ Step 14: Set up kubectl for vagrant user
    - name: Create .kube directory for vagrant
      file:
        path: /home/vagrant/.kube
        state: directory
        owner: vagrant
        group: vagrant
        mode: 0755

    - name: Copy admin.conf to vagrant kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        remote_src: yes
        owner: vagrant
        group: vagrant
        mode: 0644

    - name: Copy admin.conf to shared /vagrant folder
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /vagrant/admin.conf
        remote_src: yes
        mode: 0644
# Step 22: Dashboard

# installing Flannel
    - name: Copy Flannel CNI manifest to controller
      copy:
        src: kube-flannel.yml
        dest: /home/vagrant/kube-flannel.yml
        owner: vagrant
        group: vagrant
        mode: 0644

    - name: Apply Flannel Pod network
      become_user: vagrant
      shell: kubectl apply -f /home/vagrant/kube-flannel.yml --kubeconfig /home/vagrant/.kube/config

# installing Helm
    - name: Add Helm GPG key
      apt_key:
        url: https://baltocdn.com/helm/signing.asc
        state: present

    - name: Add Helm apt repository
      apt_repository:
        repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
        state: present
        filename: helm-stable

    - name: Install Helm
      apt:
        name: helm
        state: present
        update_cache: yes
# ingress for dashboard

    - name: Copy Dashboard Ingress manifest
      copy:
        src: dashboard-ingress.yaml
        dest: /home/vagrant/dashboard-ingress.yaml
        owner: vagrant
        group: vagrant
        mode: 0644

    - name: Apply Dashboard Ingress
      become_user: vagrant
      shell: kubectl apply -f /home/vagrant/dashboard-ingress.yaml --kubeconfig /home/vagrant/.kube/config



    - name: Add Kubernetes Dashboard Helm repo
      become_user: vagrant
      shell: helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
      args:
        creates: /home/vagrant/.dashboard_repo_added

    - name: Update Helm repositories
      become_user: vagrant
      shell: helm repo update

    - name: Install Kubernetes Dashboard via Helm
      become_user: vagrant
      shell: |
        helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard \
          --namespace kubernetes-dashboard --create-namespace \
          --kubeconfig /home/vagrant/.kube/config \
          --set fullnameOverride=kubernetes-dashboard \
          --set ingress.enabled=true \
          --set ingress.className=nginx \
          --set ingress.annotations."nginx\.ingress\.kubernetes\.io/backend-protocol"=HTTPS \
          --set ingress.hosts[0].host=dashboard.local \
          --set ingress.hosts[0].paths[0].path=/ \
          --set ingress.hosts[0].paths[0].pathType=ImplementationSpecific
    #admin user
    - name: Copy admin-user.yaml to controller
      copy:
        src: admin-user.yaml
        dest: /home/vagrant/admin-user.yaml
        owner: vagrant
        group: vagrant
        mode: 0644

    - name: Apply admin-user.yaml to create service account and binding
      become_user: vagrant
      shell: kubectl apply -f /home/vagrant/admin-user.yaml --kubeconfig /home/vagrant/.kube/config

    # ingress-nginx helm
    - name: Add ingress-nginx Helm repo
      become_user: vagrant
      shell: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      args:
        creates: /home/vagrant/.ingress_repo_added

    - name: Update Helm repos (for Ingress)
      become_user: vagrant
      shell: helm repo update

    - name: Install NGINX Ingress Controller
      become_user: vagrant
      shell: |
        helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace ingress-nginx --create-namespace \
          --kubeconfig /home/vagrant/.kube/config \
          --set controller.service.type=LoadBalancer \
          --set controller.service.loadBalancerIP=192.168.56.100 \
          --set controller.ingressClass=nginx
      #MetalLB
    - name: Install MetalLB CRDs and components
      become_user: vagrant
      shell: kubectl apply -f /ansible/metallb-native.yaml --kubeconfig /home/vagrant/.kube/config
      #wait
    - name: Wait for MetalLB webhook/controller to be ready
      become_user: vagrant
      shell: |
        kubectl wait deployment controller \
          -n metallb-system \
          --for=condition=Available=True \
          --timeout=90s \
          --kubeconfig /home/vagrant/.kube/config

    - name: Apply MetalLB IP address pool
      become_user: vagrant
      shell: kubectl apply -f /ansible/ipaddresspool.yaml --kubeconfig /home/vagrant/.kube/config

    - name: Apply MetalLB L2 advertisement
      become_user: vagrant
      shell: kubectl apply -f /ansible/l2advertisement.yaml --kubeconfig /home/vagrant/.kube/config

    


