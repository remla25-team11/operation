---
# Source: my-chart/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: sentiment-app
  labels:
    istio-injection: enabled # Crucial for Istio sidecar injection
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: my-chart/templates/grafana-dashboard-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-app-my-chart-app-dashboard
  # Deploy in 'monitoring' namespace if Grafana is there and configured to watch it.
  # Otherwise, deploy in app's namespace and ensure Grafana is configured to scan it.
  # For kube-prometheus-stack, it usually watches its own namespace or those specified.
  # Let's assume Grafana is in 'monitoring' and can discover dashboards there.
  namespace: monitoring
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    # This label is used by the Grafana sidecar to discover dashboards
    grafana_dashboard: "1"
data:
  app-dashboard.json: |-
    {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": {
                "type": "grafana",
                "uid": "-- Grafana --"
              },
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "editable": true,
        "fiscalYearStartMonth": 0,
        "graphTooltip": 0,
        "id": 29,
        "links": [],
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            },
            "id": 5,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "single",
                "sort": "none"
              }
            },
            "pluginVersion": "12.0.0",
            "targets": [
              {
                "disableTextWrap": false,
                "editorMode": "builder",
                "expr": "rate(process_cpu_seconds_total[1m])",
                "fullMetaSearch": false,
                "includeNullMetadata": false,
                "legendFormat": "__auto",
                "range": true,
                "refId": "A",
                "useBackend": false
              }
            ],
            "title": "CPU Usage",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            },
            "id": 2,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "single",
                "sort": "none"
              }
            },
            "pluginVersion": "12.0.0",
            "targets": [
              {
                "editorMode": "code",
                "expr": "sum by (endpoint) (rate(request_latency_seconds_sum[5m]))\n/\nsum by (endpoint) (rate(request_latency_seconds_count[5m]))\n",
                "legendFormat": "__auto",
                "range": true,
                "refId": "A"
              }
            ],
            "title": "Average Latency",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  }
                },
                "mappings": []
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 8
            },
            "id": 3,
            "options": {
              "legend": {
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "pieType": "pie",
              "reduceOptions": {
                "calcs": [
                  "lastNotNull"
                ],
                "fields": "",
                "values": false
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "single",
                "sort": "none"
              }
            },
            "pluginVersion": "12.0.0",
            "targets": [
              {
                "disableTextWrap": false,
                "editorMode": "builder",
                "exemplar": false,
                "expr": "sum(sentiment_predictions_total)",
                "fullMetaSearch": false,
                "includeNullMetadata": true,
                "instant": true,
                "legendFormat": "__auto",
                "range": false,
                "refId": "A",
                "useBackend": false
              }
            ],
            "title": "Sentiment Predictions Count",
            "type": "piechart"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 8
            },
            "id": 6,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "single",
                "sort": "none"
              }
            },
            "pluginVersion": "12.0.0",
            "targets": [
              {
                "editorMode": "code",
                "expr": "time() - process_start_time_seconds\n",
                "legendFormat": "__auto",
                "range": true,
                "refId": "A"
              }
            ],
            "title": "Uptime",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 16
            },
            "id": 1,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "single",
                "sort": "none"
              }
            },
            "pluginVersion": "12.0.0",
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "prometheus"
                },
                "disableTextWrap": false,
                "editorMode": "builder",
                "expr": "rate(webapp_requests_total{endpoint=\"http\"}[1m])",
                "format": "time_series",
                "fullMetaSearch": false,
                "hide": false,
                "includeNullMetadata": false,
                "instant": false,
                "legendFormat": "__auto",
                "range": true,
                "refId": "B",
                "useBackend": false
              }
            ],
            "title": "Requests per second",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 16
            },
            "id": 4,
            "options": {
              "minVizHeight": 75,
              "minVizWidth": 75,
              "orientation": "auto",
              "reduceOptions": {
                "calcs": [
                  "lastNotNull"
                ],
                "fields": "",
                "values": false
              },
              "showThresholdLabels": false,
              "showThresholdMarkers": false,
              "sizing": "auto"
            },
            "pluginVersion": "12.0.0",
            "targets": [
              {
                "disableTextWrap": false,
                "editorMode": "builder",
                "expr": "sum(process_resident_memory_bytes)",
                "fullMetaSearch": false,
                "includeNullMetadata": true,
                "legendFormat": "__auto",
                "range": true,
                "refId": "A",
                "useBackend": false
              }
            ],
            "title": "Memory Usage",
            "type": "gauge"
          }
        ],
        "preload": false,
        "schemaVersion": 41,
        "tags": [],
        "templating": {
          "list": []
        },
        "time": {
          "from": "now-30m",
          "to": "now"
        },
        "timepicker": {},
        "timezone": "browser",
        "title": "Dashboard",
        "uid": "45b7f6cc-0372-44d5-b704-6d64212c5da7",
        "version": 8
      }
---
# Source: my-chart/templates/service-app-backend.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-my-chart-app-backend
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: app-backend
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: http # Assumes container port is named 'http'
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/component: app-backend
---
# Source: my-chart/templates/service-model-backend.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-my-chart-model-backend
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: model-backend
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/component: model-backend
---
# Source: my-chart/templates/service-nginx.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-my-chart-nginx-frontend
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: nginx-frontend 
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http # Targets the 'http' port name on the pods
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app-role: nginx-frontend
---
# Source: my-chart/templates/deployment-app-backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-my-chart-app-backend
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/component: app-backend
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-chart
      app.kubernetes.io/instance: my-app
      app.kubernetes.io/component: app-backend
  template:
    metadata:
      labels:
        helm.sh/chart: my-chart
        app.kubernetes.io/name: my-chart
        app.kubernetes.io/instance: my-app
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
        
        app.kubernetes.io/component: app-backend
        
    spec:
      containers:
        - name: app-backend
          image: ghcr.io/remla25-team11/app-backend:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          env:
            - name: URL_MODEL_SERVICE
              value: "http://{{ .Release.Name }}-model-backend:8000/predict"
            - name: URL_MODEL_VERSION
              value: "http://{{ .Release.Name }}-model-backend:8000/version"
          livenessProbe:
            httpGet:
              path: /health # Assuming a /health endpoint in your Flask app
              port: http
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /health # Assuming a /health endpoint
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
---
# Source: my-chart/templates/deployment-model-backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-my-chart-model-backend
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/component: model-backend
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-chart
      app.kubernetes.io/instance: my-app
      app.kubernetes.io/component: model-backend
  template:
    metadata:
      labels:
        helm.sh/chart: my-chart
        app.kubernetes.io/name: my-chart
        app.kubernetes.io/instance: my-app
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
        
        app.kubernetes.io/component: model-backend
        
    spec:
      containers:
        - name: model-backend
          image: ghcr.io/remla25-team11/model-backend:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            - name: MODEL_PATH
              value: "/app/models/c2_Classifier_Sentiment_Model.pkl"
            - name: SERVICE_VERSION
              value: "1.0"
            - name: VECTORIZER_PATH
              value: "/app/models/c1_BoW_Sentiment_Model.pkl"
          livenessProbe:
            httpGet:
              path: /health # Assuming a /health endpoint (e.g., for model status)
              port: http
            initialDelaySeconds: 20 # Model loading might take time
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 15
---
# Source: my-chart/templates/deployment-nginx-v1.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-my-chart-nginx-frontend-v1
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/component: nginx-frontend-v1
    version: v1
    
    app-role: nginx-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-chart
      app.kubernetes.io/instance: my-app
      app.kubernetes.io/component: nginx-frontend-v1
  template:
    metadata:
      labels:
        helm.sh/chart: my-chart
        app.kubernetes.io/name: my-chart
        app.kubernetes.io/instance: my-app
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
        
        app.kubernetes.io/component: nginx-frontend-v1
        version: v1
        
        app-role: nginx-frontend
    spec:
      containers:
        - name: nginx-frontend-v1
          image: ghcr.io/remla25-team11/nginx-frontend:v1
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: APP_SERVICE_URL
              value: "http://{{ .Release.Name }}-app-backend:5000"
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
---
# Source: my-chart/templates/deployment-nginx-v2.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-my-chart-nginx-frontend-v2
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/component: nginx-frontend-v2
    version: v2
    
    app-role: nginx-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-chart
      app.kubernetes.io/instance: my-app
      app.kubernetes.io/component: nginx-frontend-v2
  template:
    metadata:
      labels:
        helm.sh/chart: my-chart
        app.kubernetes.io/name: my-chart
        app.kubernetes.io/instance: my-app
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
        
        app.kubernetes.io/component: nginx-frontend-v2
        version: v2
        
        app-role: nginx-frontend
    spec:
      containers:
        - name: nginx-frontend-v2
          image: ghcr.io/remla25-team11/nginx-frontend:v2
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: APP_SERVICE_URL
              value: "http://{{ .Release.Name }}-app-backend:5000"
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
---
# Source: my-chart/templates/istio-destinationrule.yaml
# DestinationRule for nginx-frontend service (for canary subsets)
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: app-destinationrules-nginx-frontend
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  host: my-app-my-chart-nginx-frontend
  subsets:
    - name: v1
      labels:
        version: v1
    - name: v2
      labels:
        version: v2
---
# Source: my-chart/templates/istio-destinationrule.yaml
# DestinationRule for app-backend service
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: app-destinationrules-app-backend
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  host: my-app-my-chart-app-backend
  trafficPolicy:
    # Example: If you want to enable mTLS PERMISSIVE or STRICT at namespace level,
    # you might configure clientTlsSettings here or rely on global/namespace settings.
    # tls:
    #   mode: ISTIO_MUTUAL # If mesh-wide or namespace mTLS is STRICT
    loadBalancer:
      simple: ROUND_ROBIN
  # If app-backend had versions/subsets, define them here
  # subsets:
  #   - name: v1
  #     labels:
  #       version: "v1" # Or some other identifying label
---
# Source: my-chart/templates/istio-destinationrule.yaml
# DestinationRule for model-backend service
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: app-destinationrules-model-backend
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  host: my-app-my-chart-model-backend
  trafficPolicy:
    # tls:
    #   mode: ISTIO_MUTUAL
    loadBalancer:
      simple: ROUND_ROBIN
  # If model-backend had versions/subsets, define them here
  # subsets:
  #   - name: v1
  #     labels:
  #       version: "v1"
---
# Source: my-chart/templates/rate-limit-envoyfilter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: rate-limit-app-1.0.0
  namespace: default
spec:
  workloadSelector:
    labels:
      app: app
      version: 
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          portNumber: 80
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.local_ratelimit
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
            stat_prefix: http_local_rate_limiter
            token_bucket:
              max_tokens: 10
              tokens_per_fill: 10
              fill_interval: "1s"
            filter_enabled:
              runtime_key: local_rate_limit_enabled
              default_value:
                numerator: 100
                denominator: HUNDRED
            filter_enforced:
              runtime_key: local_rate_limit_enforced
              default_value:
                numerator: 100
                denominator: HUNDRED
            response_headers_to_add:
              - append: false
                header:
                  key: x-rate-limit
                  value: "true"
---
# Source: my-chart/templates/istio-gateway.yaml
apiVersion: networking.istio.io/v1beta1 # Using v1beta1, common for recent Istio
kind: Gateway
metadata:
  name: app-gateway
  namespace: sentiment-app # Deploy Gateway in app namespace for this example
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    istio: ingressgateway # Standard selector for default Istio ingress gateway
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
      # You can add TLS configuration here if needed
      # tls:
      #   mode: SIMPLE
      #   credentialName: my-tls-secret # k8s secret in istio-system namespace
---
# Source: my-chart/templates/istio-virtualservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: app-virtualservice
  namespace: sentiment-app
  labels:
    helm.sh/chart: my-chart
    app.kubernetes.io/name: my-chart
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  hosts:
    - "*"
  gateways:
    - app-gateway # Assumes Gateway is in the same namespace
    # If Gateway is in istio-system, use: istio-system/app-gateway
  http:
    - name: "nginx-frontend-routing"
      match:
        - uri:
            prefix: / # Match all traffic for the hosts
      route:
        - destination:
            host: my-app-my-chart-nginx-frontend
            subset: v1
          weight: 90
        - destination:
            host: my-app-my-chart-nginx-frontend
            subset: v2
          weight: 10
    # You can add more http routes here for app-backend and model-backend if accessed directly
    # or keep them as internal ClusterIP services.
    # For example, to expose app-backend directly via gateway (less common for this setup):
    # - name: "app-backend-routing"
    #   match:
    #     - uri:
    #         prefix: /api/ # Assuming your app-backend serves under /api/
    #   route:
    #     - destination:
    #         host: my-app-my-chart-app-backend
    #         port:
    #           number: 5000
